Index: Телина/Lesson_1/Lesson_1_webinar_notebook.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Телина/Lesson_1/Lesson_1_webinar_notebook.ipynb b/Телина/Lesson_1/Lesson_1_webinar_notebook.ipynb
new file mode 100755
--- /dev/null	(date 1634567148000)
+++ b/Телина/Lesson_1/Lesson_1_webinar_notebook.ipynb	(date 1634567148000)
@@ -0,0 +1,1 @@
+{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.1"},"colab":{"name":"Lesson_1_webinar_notebook.ipynb","provenance":[{"file_id":"1TeXxw9gLCFmS7DU-obCjB7Xk6WalQN1M","timestamp":1634114086741}],"collapsed_sections":[],"toc_visible":true}},"cells":[{"cell_type":"markdown","metadata":{"id":"SLiBxjBJ9IMs"},"source":["# Урок 1. Алгоритм линейной регрессии. Градиентный спуск."]},{"cell_type":"markdown","metadata":{"id":"1VkfEb0Y1bFf"},"source":[""]},{"cell_type":"code","metadata":{"id":"pBxz51qa1-qr"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"g28dmmDQ1bYd"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"AgfZohhE9IMz"},"source":["## 0. Основные понятия и обозначения"]},{"cell_type":"markdown","metadata":{"id":"oCRpRG3-9IM0"},"source":["В предыдущих курсах студенты уже знакомились с признаковыми описаниями, основными алгоритмами машинного обучения и Python-библиотеками, используемыми для решения задач в этой области. Однако, перед началом изучения программы курса давайте повторим основные понятия и обозначения, используемые в машинном обучении."]},{"cell_type":"markdown","metadata":{"id":"5pzSl1NM9IM2"},"source":["Машинное обучение - дисциплина, заключаящаяся в извлечении знаний из известных данных. Машинное обучение - это раздел математики, поэтому в нем мы будем, помимо всего прочего, работать с формулами.\n","\n","_Объект_ - то, для чего нужно сделать предсказание. Например, в задаче распознавания спам-почты объектом будет являться письмо. Объекты обозначаются буквой $x$. Множество всех объектов, для которых может потребоваться сделать предсказания, называется _пространством объектов_ и обозначается $\\mathbb{X}$.\n","\n","_Ответ_ - то, что нужно предсказать. В том же примере распознавания спама ответом будет является информация о том, является письмо спамом или нет. Ответы обозначаются буквой $y$ (можно сказать, что $y = y(x)$, так как ответ зависит от объекта). _Пространство ответов_ - множество всех ответов, с которыми мы можем работать. Оно обозначается $\\mathbb{Y}$. В примере задачи распознавания спама оно состоит из двух элементов: $+1$ и $-1$ (означающие, что письмо является и не является спамом, соответственно).\n","\n","Для реализации машинного обучения компьютеру нужно \"объяснить\" объекты, которые в первоначальном виде он понять не может, с помощью сущностей, ему понятных, например, чисел. Для этого вводится понятие _признаков_. Признак - это некая числовая характеристика объекта. Совокупность всех признаков объекта $x = (x^{1}, x^{2},..., x^{d})$ называется его _признаковым описанием_. Оно является $d$-мерным вектором, то есть к нему можно применять все операции, описанные линейной алгеброй."]},{"cell_type":"markdown","metadata":{"id":"eb5uTrO89IM4"},"source":["Множество значений $i$-го признака будем обозначать $D_{i}$. Существует множество различных видов признаков:\n","\n","- _Бинарные признаки_ принимают два значения: $D_{i} = \\{0,1\\}$. Примером  в задаче кредитного скоринга может служить ответ, выше ли доход клиента определенной установленной суммы. При положительном ответе признак полагается равным 1, при отрицательном - 0.\n","\n","- _Вещественные признаки_ могут принимать в качестве значений все вещественные числа: $D_{i} = \\mathbb{R}$. Примерами могут выступать возраст человека, заработная плата, количество звонков в колл-центр в месяц и т.д.\n","\n","- _Категориальные признаки_ - это такие признаки, значения которых можно сравнивать только на равенство, и нельзя на \"больше-меньше\". В этом случае $D_{i}$ - неупорядоченное множетсво. Примерами таких признаков могут выступать город, в котором родился клиент банка, или его образование.\n","\n","- _Порядковые признаки_ - частный случай категоиральных признаков. В этом случае $D_{i}$ - упорядоченное множество. Признаки можно сравнивать между собой, но нельзя определить расстояние между ними. Например, то же образование, но с введенным осмысленным порядком (высшее образование больше среднего профессионального, которое в свою очередь больше среднего и т.д.)\n","\n","- _Множествозначные признаки_ - признаки, значения которых на объекте являются подмножеством некоторого множества. Например, в задачах анализа текстов таким признаком является множество слов, которые входят в текст. Оно является подмножеством большого словаря."]},{"cell_type":"markdown","metadata":{"id":"_pQODZa09IM6"},"source":["В первой части нашего курса мы рассмотрим алгоритмы _обучения с учителем_ или _контролироемого обучения (supervised learning)_. Данный метод заключается в восстановлении общей закономерности по конечному числу известных примеров."]},{"cell_type":"markdown","metadata":{"id":"iABsxWwB9IM6"},"source":["Центральным понятием машинного обучения является _обучающая выборка_. Это примеры, на основе которых мы планируем строить общую закономерность. Она обозначается $X$ и состоит из $l$ пар объектов $x_{i}$ и известных ответов $y_{i}$:\n","\n","$$X = (x^{i}, y_{i})^l_{i=1}.$$"]},{"cell_type":"markdown","metadata":{"id":"F0Fh0yJn9IM7"},"source":["Функция, отображающая пространство объектов $\\mathbb{X}$ в пространство ответов $\\mathbb{Y}$, помогающая нам делать предсказания, называется _алгоритмом_ или _моделью_ и обозначается $a(x)$. Она принимает на вход объект и выдает ответ.\n","\n","В нашем примере распознавания спама такой моделью может являться линейный алгоритм (сумма всех признаков с некоторыми коэффициентами, также называемыми весами, $w_{i}$ c прибавлением константного коэффициента $w_{0}$):\n","\n","$$a(x) = sign(w_{0} + w_{1}x^{1}+w_{2}x^{2}+...+w_{d}x^{d}).$$\n","\n","Признаками в ней могут выступать наличие определенных слов в письме, наличие отправителя в адресной книге получателя, дата и время отправления, наличие фишинговых url и т.д. Операция взятия знака от этого выражения берется так как в примере распознавания спама пространство ответов состоит всего из двух элементов, как говорилось ранее."]},{"cell_type":"markdown","metadata":{"id":"BVlLfs339IM8"},"source":["Для решения определенной задачи не все алгоритмы одинаково хорошо подходят. Для определения наиболее подходящего алгоритма введена характеристика, называемая _функционалом ошибки_ $Q(a, X)$. Он принимает на вход алгоритм и выборку и сообщает, насколько хорошо данный алгоритм работает на данной выборке. В примере распознавания спам-писем в качестве такого функционала может выступать доля неправильных ответов (предсказаний). Задача обучения заключается в подборе такого алгоритма, при котором достигается минимум функционала ошибки $Q(a, X)\\rightarrow min.$\n","\n","Наиболее подходящий алгоритм при этом выбирается из множества, называемого _семейством алгоритмов_ $\\mathbb{A}$. Их мы будем рассматривать в данном курсе."]},{"cell_type":"markdown","metadata":{"id":"QCfFle3N9INA"},"source":["## 1. Линейная регрессия. MSE"]},{"cell_type":"markdown","metadata":{"id":"bLvKfPfN9INB"},"source":["В предыдущем разделе мы упоминали линейные модели - это такие модели, которые сводятся к суммированию значений признаков с некоторыми весами. Само название модели говорит о том, что зависимость предсказываемой переменной от признаков будет линейной:\n"," \n","$$a(x) = w_{0}+\\sum^{d}_{i=1}w_{i}x^{i}.$$\n"," \n","В данном случае парамертрами моделей являются веса $w_{i}$. Вес $w_{0}$ называется _свободным коэффициентом_ или _сдвигом_. Оптимизация модели в таком случае заключается в подборе оптимальных значений весов. Сумму в формуле также можно описать как скалярное произведение вектора признаков $x=(x^{1},...,x^{d})$ на вектор весов $w=(w_{1},...,w_{d})$:\n"," \n","$$a(x) = w_{0}+\\left \\langle w,x \\right \\rangle.$$\n"," \n","Обратим внимание, что сдвиг делает модель неоднородной и затрудняет ее дальнейшую оптимизацию. Для устранения этого фактора обычно используют прием, позволяющий упростить запись: к признаковому описанию объекта добавляется еще один признак (константный), на каждом объекте равный единице. В этом случае вес при нем как раз будет по смыслу совпадать со свободным коэффициентом, и сам $w_{0}$ будет не нужен. Тогда получим\n"," \n","$$a(x) = \\sum^{d+1}_{i=1}w_{i}x^{i}=\\left \\langle w,x \\right \\rangle.$$\n"," \n","За счет простой формы линейные модели достаточно легко обучются и позволяют работать с зашумленными данными, небольшими выборками, контролирауя при этом риск переобучения."]},{"cell_type":"markdown","metadata":{"id":"i8v9_4TB9INC"},"source":["Для обучения модели необходимо иметь возможность измерять точность линейного алгоритма на выборке (обучающей или тестовой). \n","\n","В качестве меры ошибки можно взять абсолютное отклонение истинного значения от прогноза $Q(a,y)=a(x)-y$, но тогда минимизация функционала ошибки (в которой и состоит задача обучения) будет достигаться при принятии им отрицательного значения. Например, если истинное значение ответа равно $10$, а алгоритм $a(x)$ выдает ответ $11$, отклонение будет равно $1$, а при значении предсказания равном $1$, отклонение будет равно $1-10=-9$. Значение ошибки во втором случае ниже, однако разница истинного значения и предсказания нашей модели больше. Таким образом, такой функционал ошибки не поддается минимизации. \n","\n","Логичным кажется решение использовать в качестве функционала ошибки модуль отклонения $Q(a,y)=|a(x)-y|$. Соответствующий функционал ошибки называется средним абсолютным отклонением (mean absolute error, MAE):\n","\n","$$Q(a,x) = \\frac{1}{l}\\sum^{l}_{i=1}|a(x_{i})-y_{i}|.$$\n","\n","Однако, как мы далее увидим, зачастую методы оптимизации включают в себя дифференцирование, а функция модуля не является гладкой - она не имеет производной в нуле, поэтому ее оптимизация бывает затруднительной.\n","\n","Поэтому сейчас основной способ измерить отклонение - посчитать квадрат разности $Q(a,y)=(a(x)-y)^{2}$. Такая функция является гладкой и имеет производную в каждой точке, а ее минимум достигается при равенстве истинного ответа $y$ и прогноза $a(x)$.\n","\n","Основанный на этой функции функционал ошибки называется _среднеквадратичным отклонением_ (mean squared error, MSE):\n","\n","$$Q(a,x) = \\frac{1}{l}\\sum^{l}_{i=1}(a(x_{i})-y_{i})^{2}.$$"]},{"cell_type":"markdown","metadata":{"id":"qRwG-e0m9IND"},"source":["## 2. Метод наименьших квадратов"]},{"cell_type":"markdown","metadata":{"id":"JpzXCWHG9INE"},"source":["Как уже говорилось ранее, обучение модели регрессии заключается в минимизации функционала ошибки. Таким образом, в случае использования среднеквадратичной ошибки получаем задачу оптимизации\n","\n","$$Q(w,x) = \\frac{1}{l}\\sum^{l}_{i=1}(\\left \\langle w,x_{i} \\right \\rangle-y_{i})^{2} \\rightarrow \\underset{w}{\\text{min}}.$$\n","\n","Способ вычисления весов путем минимизации среднеквадратичного отклонения называется _методом наименьших квадратов_.\n","\n","Заметим, что здесь мы переписали выражение функционала ошибки, заменив $a(x)$ на скалярное призведение $\\left \\langle w,x \\right \\rangle$, после чего мы уже имеем функцию, а не функционал ошибки, так как $Q$ зависит не от некоторой функции $a(x)$, а от вектора весов $w$, и оптимизировать нужно именно по нему, что гораздо проще."]},{"cell_type":"markdown","metadata":{"id":"eC50nWZ69INE"},"source":["Имеет смысл переписать имеющиеся соотношения в матричном виде. В матрицу \"объекты-признаки\" впишем по строкам $d$ признаков для всех $l$ объектов из обучающей выборки: \n","\n","$$X = \\begin{pmatrix}\n","x_{11} & ... & x_{1d}\\\\ \n","... & ... & ...\\\\ \n","x_{l1} & ... & x_{ld}\n","\\end{pmatrix},$$\n","\n","и составим вектор ответов $y$ из истинных ответов для данной выборки:\n","\n","$$y = \\begin{pmatrix}\n","y_{1}\\\\ \n","...\\\\ \n","y_{l}\n","\\end{pmatrix}.$$\n","\n","Помня, что $w$ - вектор параметров, переписанная в матричном виде задача будет выглядеть следующим образом:\n","\n","$$Q(w, X) = \\frac{1}{l}||Xw-y||^{2}\\rightarrow \\underset{w}{\\text{min}},$$\n","\n","где используется евклидова ($L_{2}$) норма."]},{"cell_type":"markdown","metadata":{"id":"1eW4aV609ING"},"source":["Продифференцировав данную функцию по вектору $w$ и приравняв к нулю, можно получить явную анатилическую формулу для решения задачи минимизации (ссылка на подробный вывод формулы есть в списке дополнительных материалов):\n","\n","$$w = (X^{T}X)^{-1}X^{T}y.$$\n","\n","Это решение называется _нормальным уравнением_ линейной регрессии. Наличие аналитического решения кажется положительным фактором, однако, у него есть некоторые минусы, среди которых вычислительная сложность операции (обращение матрицы $X^{T}X$ будет иметь кубическую сложность от количества признаков $d^{3}$), а также тот факт, что матрица $X^{T}X$ может быть вырожденной и поэтому необратимой. Тогда найти решение будет невозможно."]},{"cell_type":"markdown","metadata":{"id":"C63Alg-A9INH"},"source":["Более удобным подходом будет разработка решения с помощью численных методов оптимизации, одним из которых является _градиентный спуск_."]},{"cell_type":"markdown","metadata":{"id":"nfRgH2cC9INI"},"source":["## 3. Градиентный спуск"]},{"cell_type":"markdown","metadata":{"id":"fgHZFo-x9INK"},"source":["Среднеквадратичная ошибка имеет один минимум и непрерывна на всей области значений (то есть является выпуклой и гладкой), а значит в каждой ее точке можно посчитать частные производные.\n","\n","Вспомним, что _градиентом_ функции $f$ называется $n$-мерный вектор из частных производных. \n","\n","$$ \\nabla f(x_{1},...,x_{d}) = \\left(\\frac{\\partial f}{\\partial x_{i}}\\right)^{d}_{i=1}.$$\n","\n","При этом известно, что __градиент задает направление наискорейшего роста функции__. Значит, антиградиент будет показывать направление ее скорейшего убывания, что будет полезно нам в нашей задаче минимизации функционала ошибки. "]},{"cell_type":"markdown","metadata":{"id":"EITeLDLk9INM"},"source":["Для решения задачи нам требуется определить некоторую стартовую точку и итерационно сдвигаться от нее в сторону антиградиента с определенным _шагом_ $\\eta_{k}$, на каждом шагу пересчитывая градиент в точке, в которой мы находимся. Таким образом, имея начальный вектор весов $w^{0}$, $k$-й шаг градиентного спуска будет иметь вид\n","\n","$$w^{k} = w^{k-1} - \\eta_{k}\\nabla Q(w^{k-1}, X).$$\n"]},{"cell_type":"markdown","metadata":{"id":"AD9YpghL9INO"},"source":["Итерации следует продолжать, пока не наступает сходимость. Она определяется разными способами, но в даннном случае удобно определять как ситуацию, когда векторы весов от шага к шагу изменяются незначительно, то есть норма отклонения вектора весов на текущем шаге от предыдущего не привышает заданное значение $\\varepsilon$:\n","\n","$$||w^{k}-w^{k-1}|| < \\varepsilon.$$"]},{"cell_type":"code","metadata":{"id":"QIPy1VQ6EtxS"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"b4yKBld_9INT"},"source":["Начальный вектор весов $w_{0}$ также можно определять различными способами, обычно его берут нулевым или состоящим из случайных небольших чисел."]},{"cell_type":"markdown","metadata":{"id":"iJiQ-wQ77ukR"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"GhuJyO__9INU"},"source":["В случае многомерной регрессии (при количестве признаков больше 1) при оптимизации функционала ошибки \n","\n","$$Q(w, X) = \\frac{1}{l}||Xw-y||^{2}\\rightarrow \\underset{w}{\\text{min}}$$\n","\n","формула вычисления градиента принимает вид\n","\n","$$\\nabla_{w}Q(w,X) = \\frac{2}{l}X^{T}(Xw-y).$$"]},{"cell_type":"markdown","metadata":{"id":"fkskCJdb9INV"},"source":["Смоделируем работу градиентного спуска при помощи Numpy."]},{"cell_type":"code","metadata":{"id":"bJ1KA9cq9INW"},"source":["import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k-sYDyFj9INZ"},"source":["np.random.seed(1234)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lKUBgDlf9INe"},"source":["# Возьмем 2 признака и 1000 объектов\n","n_features = 2\n","n_objects = 1000\n","\n","# сгенерируем вектор истинных весов\n","w_true = np.random.normal(size=(n_features, ))\n","\n","# сгенерируем матрицу X, вычислим Y с добавлением случайного шума\n","X = np.random.uniform(-7, 7, (n_objects, n_features))\n","Y = X.dot(w_true) + np.random.normal(0, 0.5, size=(n_objects))\n","\n","# возьмем нулевые начальные веса\n","w = np.zeros(n_features)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D65g5kadFp7Q","executionInfo":{"status":"ok","timestamp":1613482729247,"user_tz":-60,"elapsed":892,"user":{"displayName":"Ласточка Чвир","photoUrl":"","userId":"17630380369571981508"}},"outputId":"14a33fbe-4ec3-4990-9e40-9c77b6280fb3"},"source":["X"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.87181165,  3.99502017],\n","       [ 3.91966131, -3.18370353],\n","       [-3.12950043,  4.22621049],\n","       ...,\n","       [ 3.51597757,  5.11940305],\n","       [ 6.35903104,  5.31390661],\n","       [ 5.12347492,  2.96879971]])"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"fc_BZPNhyn9L","executionInfo":{"status":"ok","timestamp":1613482734158,"user_tz":-60,"elapsed":1526,"user":{"displayName":"Ласточка Чвир","photoUrl":"","userId":"17630380369571981508"}},"outputId":"5ad488ab-e53d-4d01-f215-e78d9753465e"},"source":["import matplotlib.pyplot as plt\n","plt.plot(X, Y)\n","plt.ylabel('some numbers')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Ujy3MY_s9INj"},"source":["# реализуем функцию, определяющую среднеквадратичную ошибку\n","def mserror(X, w, y_pred):\n","    y = X.dot(w)\n","    return (sum((y - y_pred)**2)) / len(y)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NeKE8moY9INm"},"source":["Реализуем функцию, вычисляющую вектор весов по нормальному уравнению линейной регрессии, и применим ее."]},{"cell_type":"code","metadata":{"id":"IpxGlgkD9INn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613482743662,"user_tz":-60,"elapsed":837,"user":{"displayName":"Ласточка Чвир","photoUrl":"","userId":"17630380369571981508"}},"outputId":"bfd65429-9e8b-444f-a153-fb96c8dd26fc"},"source":["def normal_equation(X, y):\n","    return np.linalg.solve((X.T).dot(X), (X.T).dot(y))\n","\n","normal_eq_w = normal_equation(X, Y)\n","print(f'В случае использования нормального уравнения функционал ошибки составляет {round(mserror(X, normal_eq_w, Y), 4)}')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["В случае использования нормального уравнения функционал ошибки составляет 0.2413\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Cqw7Fffj9IN0"},"source":["Обучим линейную регрессию путем градиентного спуска и получим графики изменения весов и ошибки"]},{"cell_type":"code","metadata":{"id":"2vnzIkxt9IN1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613482784588,"user_tz":-60,"elapsed":1234,"user":{"displayName":"Ласточка Чвир","photoUrl":"","userId":"17630380369571981508"}},"outputId":"debdeb7d-6c04-4ce1-bbab-bb837ddc887a"},"source":["# список векторов весов после каждой итерации\n","w_list = [w.copy()]\n","\n","# список значений ошибок после каждой итерации\n","errors = []\n","\n","# шаг градиентного спуска\n","eta = 0.01\n","\n","# максимальное число итераций\n","max_iter = 1e4\n","\n","# критерий сходимости (разница весов, при которой алгоритм останавливается)\n","min_weight_dist = 1e-8\n","\n","# зададим начальную разницу весов большим числом\n","weight_dist = np.inf\n","\n","# счетчик итераций\n","iter_num = 0\n","\n","# ход градиентного спуска\n","while weight_dist > min_weight_dist and iter_num < max_iter:\n","    new_w = w - 2 * eta * np.dot(X.T, (np.dot(X, w) - Y)) / Y.shape[0]\n","    weight_dist = np.linalg.norm(new_w - w, ord=2)\n","    \n","    w_list.append(new_w.copy())\n","    errors.append(mserror(X, new_w, Y))\n","    \n","    iter_num += 1\n","    w = new_w\n","    \n","w_list = np.array(w_list)\n","\n","print(X.shape, w.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1000, 2) (2,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Afahfb849IN4","colab":{"base_uri":"https://localhost:8080/","height":406},"executionInfo":{"status":"ok","timestamp":1613482790221,"user_tz":-60,"elapsed":912,"user":{"displayName":"Ласточка Чвир","photoUrl":"","userId":"17630380369571981508"}},"outputId":"c0813753-44a7-48f9-a648-984ccfafee1a"},"source":["# Визуализируем изменение весов (красной точкой обозначены истинные веса, сгенерированные вначале)\n","plt.figure(figsize=(13, 6))\n","plt.title('Gradient descent')\n","plt.xlabel(r'$w_1$')\n","plt.ylabel(r'$w_2$')\n","\n","plt.scatter(w_list[:, 0], w_list[:, 1])\n","plt.scatter(w_true[0], w_true[1], c='r')\n","plt.plot(w_list[:, 0], w_list[:, 1])\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 936x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"MiTINBlK9IN7"},"source":["После каждой итерации значения искомых весов приближаются к истинным, однако, не становятся им равны из-за шума, добавленного в вектор ответов."]},{"cell_type":"code","metadata":{"id":"lFzwe8pW9IN8","colab":{"base_uri":"https://localhost:8080/","height":312},"executionInfo":{"status":"ok","timestamp":1613482796451,"user_tz":-60,"elapsed":1696,"user":{"displayName":"Ласточка Чвир","photoUrl":"","userId":"17630380369571981508"}},"outputId":"8579f0bf-7c8a-47bd-c836-0a4d04cb0214"},"source":["# Визуализируем изменение функционала ошибки\n","plt.plot(range(len(errors)), errors)\n","plt.title('MSE')\n","plt.xlabel('Iteration number')\n","plt.ylabel('MSE')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'MSE')"]},"metadata":{"tags":[]},"execution_count":11},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"0Kcz4wFx9IOB"},"source":["Видно, что изменение монотонно и начинается с высокой точки, после определенного количества итераций выходя на асимптоту."]},{"cell_type":"markdown","metadata":{"id":"noIKD8ls9IOD"},"source":["Очень важно при использовании метода градиентного спуска правильно подбирать шаг. Если длина шага будет слишком мала, то метод будет слишком медленно приближаться к правильному ответу, и потребуется очень большое количество итераций для достижения сходимости. Если же длина наоборот будет слишком большой, появится вероятность \"перепрыгивания\" алгоритма через минимум функции или вообще отсутствия сходимости градиентного спуска.\n","\n","Применяется методика использования переменного размера шага: на начальных этапах берется большой шаг, который с увеличением количества итераций снижается. Одна из таких методик - вычисление на каждой итерации размера шага по формуле\n","\n","$$\\eta_{k} = \\frac{c}{k},$$\n","\n","где $c$ - некоторая константа, а $k$ - номер шага."]},{"cell_type":"markdown","metadata":{"id":"IMF9JaD09IOF"},"source":["## Дополнительные материалы"]},{"cell_type":"markdown","metadata":{"id":"s7td81sE9IOG"},"source":["1. [Вывод аналитической формулы решения уравнения линейной регрессии](https://habr.com/ru/company/ods/blog/323890/#metod-naimenshih-kvadratov) (см. пункт 1.2)"]},{"cell_type":"markdown","metadata":{"id":"E77_BVG59IOH"},"source":["## Литература"]},{"cell_type":"markdown","metadata":{"id":"wuMdnCuu9IOI"},"source":["1. [Математическое описание метода градиентного спуска](http://www.machinelearning.ru/wiki/index.php?title=%D0%9C%D0%B5%D1%82%D0%BE%D0%B4_%D0%B3%D1%80%D0%B0%D0%B4%D0%B8%D0%B5%D0%BD%D1%82%D0%BD%D0%BE%D0%B3%D0%BE_%D1%81%D0%BF%D1%83%D1%81%D0%BA%D0%B0)\n","2. [Документация NumPy](https://docs.scipy.org/doc/numpy-1.16.0/reference/routines.html)"]}]}
\ No newline at end of file
Index: Телина/Lesson_1/Lesson_1.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Телина/Lesson_1/Lesson_1.ipynb b/Телина/Lesson_1/Lesson_1.ipynb
new file mode 100755
--- /dev/null	(date 1634567147000)
+++ b/Телина/Lesson_1/Lesson_1.ipynb	(date 1634567147000)
@@ -0,0 +1,977 @@
+{
+ "cells": [
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "# Урок 1. Алгоритм линейной регрессии. Градиентный спуск"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "toc": true
+   },
+   "source": [
+    "<h1>План занятия<span class=\"tocSkip\"></span></h1>\n",
+    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Линейная-регрессия\" data-toc-modified-id=\"Линейная-регрессия-1\">Линейная регрессия</a></span><ul class=\"toc-item\"><li><span><a href=\"#Уравнение-прямой\" data-toc-modified-id=\"Уравнение-прямой-1.1\">Уравнение прямой</a></span></li><li><span><a href=\"#Уравнение-линейной-регрессии\" data-toc-modified-id=\"Уравнение-линейной-регрессии-1.2\">Уравнение линейной регрессии</a></span></li></ul></li><li><span><a href=\"#Метод-наименьших-квадратов\" data-toc-modified-id=\"Метод-наименьших-квадратов-2\">Метод наименьших квадратов</a></span></li><li><span><a href=\"#Градиентный-спуск-(gradient-descent)\" data-toc-modified-id=\"Градиентный-спуск-(gradient-descent)-3\">Градиентный спуск (gradient descent)</a></span></li><li><span><a href=\"#Домашние-задания\" data-toc-modified-id=\"Домашние-задания-4\">Домашние задания</a></span></li></ul></div>"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 1,
+   "metadata": {
+    "colab": {},
+    "colab_type": "code",
+    "id": "ak8b3KV45kVW"
+   },
+   "outputs": [],
+   "source": [
+    "import numpy as np\n",
+    "import matplotlib.pyplot as plt\n",
+    "plt.rcParams.update({'font.size': 14,\n",
+    "                     'xtick.labelsize': 14})"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### Линейная регрессия"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "<img src='img/linear_regression.png' width=400 align='left'>"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Уравнение прямой"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "colab": {
+     "base_uri": "https://localhost:8080/",
+     "height": 52
+    },
+    "colab_type": "code",
+    "id": "U3vVuLOc6Us6",
+    "outputId": "736f4095-bc2b-4816-f9c3-5696f82632ee"
+   },
+   "source": [
+    "<div style='float:left;'><img src='img/slope-intercept-form.png' width=250 align='left'></img></div><div style='float:left;'><img src='img\\slope-intercept.png' width=300 align='center'></img></div>"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "4de63e16415948058964445a5d24e236",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "interactive(children=(FloatSlider(value=0.0, description='m', max=2.0, min=-2.0), IntSlider(value=0, descripti…"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "from ipywidgets import interactive\n",
+    "\n",
+    "def f(m, b):\n",
+    "    plt.figure(2)\n",
+    "    x = np.linspace(0, 10, num=1000)\n",
+    "    plt.plot(x, m * x + b)\n",
+    "    plt.ylim(0, 10)\n",
+    "    plt.show()\n",
+    "\n",
+    "interactive_plot = interactive(f, m=(-2.0, 2.0), b=(-10, 10, 1))\n",
+    "output = interactive_plot.children[-1]\n",
+    "output.layout.height = '350px'\n",
+    "interactive_plot"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "#### Уравнение линейной регрессии"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "$${y}_i = w_0 + w_1\\cdot x_{i}+\\epsilon_i, \\text{ for } i \\in [1,n]$$\n",
+    "$$\\hat{y}_i = \\hat w_0\\cdot 1 + \\hat w_1\\cdot x_{i}, \\text{ for } i \\in [1,n]$$"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "$$\\vec{y}=X\\vec{w},$$\n",
+    "\n",
+    "\n",
+    "$$\\text{где }\\vec{y} = \\begin{pmatrix}\n",
+    "\\hat y_{1}\\\\ \n",
+    "\\vdots\\\\ \n",
+    "\\hat y_{n}\n",
+    "\\end{pmatrix}, \n",
+    "X = \\begin{pmatrix}\n",
+    "1 & x_{1}\\\\ \n",
+    "\\vdots & \\vdots\\\\ \n",
+    "1 & x_{n}\n",
+    "\\end{pmatrix},\n",
+    "\\vec{w} = \\begin{pmatrix}\n",
+    "\\hat w_{0}\\\\ \n",
+    "\\hat w_{1}\n",
+    "\\end{pmatrix}\n",
+    "$$"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "metadata": {
+    "colab": {},
+    "colab_type": "code",
+    "id": "i77tZbAd5plB"
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(10, 2)"
+      ]
+     },
+     "execution_count": 3,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "X = np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],   # для умножения на intercept\n",
+    "              [1, 1, 2, 1, 3, 0, 5, 10, 1, 2]]).T # стаж репетитора\n",
+    "X.shape"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "array([[ 1,  1],\n",
+       "       [ 1,  1],\n",
+       "       [ 1,  2],\n",
+       "       [ 1,  1],\n",
+       "       [ 1,  3],\n",
+       "       [ 1,  0],\n",
+       "       [ 1,  5],\n",
+       "       [ 1, 10],\n",
+       "       [ 1,  1],\n",
+       "       [ 1,  2]])"
+      ]
+     },
+     "execution_count": 4,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "X"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 5,
+   "metadata": {
+    "colab": {},
+    "colab_type": "code",
+    "id": "VsNrKi1Q6Wmh"
+   },
+   "outputs": [],
+   "source": [
+    "# средний балл ЕГЭ (целевая переменная)\n",
+    "y = [45, 55, 50, 59, 65, 35, 75, 80, 50, 60]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
+   "metadata": {
+    "colab": {
+     "base_uri": "https://localhost:8080/",
+     "height": 283
+    },
+    "colab_type": "code",
+    "id": "qrXJ8gQBHMmy",
+    "outputId": "efab3114-264e-4226-b46c-faeaea681246"
+   },
+   "outputs": [
+    {
+     "data": {
+      "image/png": "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\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "plt.scatter(X[:,1], y)\n",
+    "plt.xlabel('стаж')\n",
+    "plt.ylabel('ср.балл ЕГЭ');"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 7,
+   "metadata": {
+    "colab": {
+     "base_uri": "https://localhost:8080/",
+     "height": 283
+    },
+    "colab_type": "code",
+    "id": "qrXJ8gQBHMmy",
+    "outputId": "efab3114-264e-4226-b46c-faeaea681246"
+   },
+   "outputs": [
+    {
+     "data": {
+      "image/png": "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\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "# y = m * x + b\n",
+    "m = 4\n",
+    "b = 45\n",
+    "plt.scatter(X[:,1], y);\n",
+    "plt.plot(X[:,1],  m * X[:,1] + b, color='red')\n",
+    "plt.xlabel('стаж')\n",
+    "plt.ylabel('ср.балл ЕГЭ');"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 8,
+   "metadata": {
+    "colab": {},
+    "colab_type": "code",
+    "id": "NntLxvtU7CbH"
+   },
+   "outputs": [],
+   "source": [
+    "y_pred1 = 45 + 4 * X[:,1] \n",
+    "y_pred2 = 40 + 7 * X[:,1]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 9,
+   "metadata": {
+    "colab": {
+     "base_uri": "https://localhost:8080/",
+     "height": 34
+    },
+    "colab_type": "code",
+    "id": "XsDNASCq9VBe",
+    "outputId": "b5350887-7fc5-4cd4-e50c-15b2c7ac0d9e"
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "array([49, 49, 53, 49, 57, 45, 65, 85, 49, 53])"
+      ]
+     },
+     "execution_count": 9,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "y_pred1"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 10,
+   "metadata": {
+    "colab": {
+     "base_uri": "https://localhost:8080/",
+     "height": 52
+    },
+    "colab_type": "code",
+    "id": "R8zyO-Qfs51Z",
+    "outputId": "9eb1cff7-fe54-461d-a332-5603259f6377"
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "array([ 47,  47,  54,  47,  61,  40,  75, 110,  47,  54])"
+      ]
+     },
+     "execution_count": 10,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "y_pred2"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 11,
+   "metadata": {
+    "colab": {
+     "base_uri": "https://localhost:8080/",
+     "height": 283
+    },
+    "colab_type": "code",
+    "id": "kbQbHKlas_3u",
+    "outputId": "4a04f1ee-8152-4259-ebf8-991d50f47278"
+   },
+   "outputs": [
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "plt.scatter(X[:,1], y)\n",
+    "plt.plot(X[:,1], y_pred1, label='pred 1')\n",
+    "plt.plot(X[:,1], y_pred2, label='pred 2')\n",
+    "plt.xlabel('стаж')\n",
+    "plt.ylabel('ср.балл ЕГЭ')\n",
+    "plt.legend();"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 12,
+   "metadata": {
+    "colab": {},
+    "colab_type": "code",
+    "id": "zbsqjAxH9WqI"
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(2.0, -0.8)"
+      ]
+     },
+     "execution_count": 12,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "err1 = np.mean(y - y_pred1)\n",
+    "err2 = np.mean(y - y_pred2)\n",
+    "err1, err2"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 13,
+   "metadata": {
+    "colab": {},
+    "colab_type": "code",
+    "id": "vUqCthPf9eYI"
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(6.4, 7.4)"
+      ]
+     },
+     "execution_count": 13,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "# mae - mean absolute error\n",
+    "mae_1 = np.mean(np.abs(y - y_pred1))\n",
+    "mae_2 = np.mean(np.abs(y - y_pred2))\n",
+    "mae_1, mae_2"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 14,
+   "metadata": {
+    "colab": {},
+    "colab_type": "code",
+    "id": "XTn2bZIg_EBS"
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(50.0, 121.4)"
+      ]
+     },
+     "execution_count": 14,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "# mse - mean squared error\n",
+    "mse_1 = np.mean((y - y_pred1)**2)\n",
+    "mse_2 = np.mean((y - y_pred2)**2)\n",
+    "mse_1, mse_2"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "colab_type": "text",
+    "id": "R4zHyZ2Da5HV"
+   },
+   "source": [
+    "### Метод наименьших квадратов"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Нормальное уравнение линейной регрессии\n",
+    "$$\\vec{w} = (X^{T}X)^{-1}X^{T}\\vec{y}$$"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 15,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "array([[ 10,  26],\n",
+       "       [ 26, 146]])"
+      ]
+     },
+     "execution_count": 15,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "X.T @ X"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 16,
+   "metadata": {
+    "colab": {
+     "base_uri": "https://localhost:8080/",
+     "height": 34
+    },
+    "colab_type": "code",
+    "id": "mnyZzkaDBegD",
+    "outputId": "368800a6-deef-46d0-b27f-d6eb5e46a743"
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "array([47.23214286,  3.91071429])"
+      ]
+     },
+     "execution_count": 16,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "w = np.linalg.inv(X.T @ X) @ X.T @ y\n",
+    "w"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 17,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(47.23214285714286, 3.910714285714285)"
+      ]
+     },
+     "execution_count": 17,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "w1 = np.sum((y - np.mean(y)) * (X[:,1] - X[:,1].mean())) / np.sum((X[:,1] - X[:,1].mean()) ** 2)\n",
+    "w0 = np.mean(y) - w1 * X[:,1].mean()\n",
+    "w0, w1"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "[45 45 50 45 55 40 65 90 45 50]\n",
+      "[45 45 50 45 55 40 65 90 45 50]\n",
+      "[45 45 50 45 55 40 65 90 45 50]\n",
+      "[45 45 50 45 55 40 65 90 45 50]\n",
+      "[45 45 50 45 55 40 65 90 45 50]\n"
+     ]
+    }
+   ],
+   "source": [
+    "w_ = [40, 5]\n",
+    "print(X @ w_)\n",
+    "print(np.dot(w_, X.T))\n",
+    "print(np.dot(X, w_))\n",
+    "print(w_[0] * X[:,0] + w_[1] * X[:,1])\n",
+    "print(np.sum(w_ * X, axis=1))"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 19,
+   "metadata": {
+    "colab": {
+     "base_uri": "https://localhost:8080/",
+     "height": 282
+    },
+    "colab_type": "code",
+    "id": "Lyg-J3H7Bnv5",
+    "outputId": "7701dd28-d123-4773-cd1f-1439abfb6d90"
+   },
+   "outputs": [
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "plt.scatter(X[:,1], y)\n",
+    "plt.plot(X[:,1], 45 + X[:,1] * 4, color='g')\n",
+    "plt.plot(X[:,1], 40 + X[:,1] * 7)\n",
+    "plt.plot(X[:,1], w[0] + w[1] * X[:,1], color='red');"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 20,
+   "metadata": {
+    "colab": {},
+    "colab_type": "code",
+    "id": "JTSC2cFnCd8T"
+   },
+   "outputs": [],
+   "source": [
+    "def calc_mse(y, y_pred):\n",
+    "    err = np.mean((y - y_pred)**2)\n",
+    "    return err\n",
+    "\n",
+    "def calc_mae(y, y_pred):\n",
+    "    err = np.mean(np.abs(y - y_pred))\n",
+    "    return err"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 21,
+   "metadata": {
+    "colab": {
+     "base_uri": "https://localhost:8080/",
+     "height": 34
+    },
+    "colab_type": "code",
+    "id": "AaE_x_nCDW3x",
+    "outputId": "74189131-5508-4ba0-a346-42b2ba6ef418"
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(6.4, 50.0)"
+      ]
+     },
+     "execution_count": 21,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "calc_mae(y, y_pred1), calc_mse(y, y_pred1)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 22,
+   "metadata": {
+    "colab": {
+     "base_uri": "https://localhost:8080/",
+     "height": 50
+    },
+    "colab_type": "code",
+    "id": "Yxo6vu3NDaTC",
+    "outputId": "7e152226-fe88-4e14-ebee-1501abb61966"
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "array([51.14285714, 51.14285714, 55.05357143, 51.14285714, 58.96428571,\n",
+       "       47.23214286, 66.78571429, 86.33928571, 51.14285714, 55.05357143])"
+      ]
+     },
+     "execution_count": 22,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "y_pred3 = w[0] + w[1] * X[:,1]\n",
+    "y_pred3"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 23,
+   "metadata": {
+    "colab": {
+     "base_uri": "https://localhost:8080/",
+     "height": 34
+    },
+    "colab_type": "code",
+    "id": "_WtO6lvhDmQ6",
+    "outputId": "8de8b895-85d8-448e-f565-b70e93a5dd25"
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(6.182142857142856, 45.937499999999986)"
+      ]
+     },
+     "execution_count": 23,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "calc_mae(y, y_pred3), calc_mse(y, y_pred3)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "colab_type": "text",
+    "id": "JAOgIXLRa--g"
+   },
+   "source": [
+    "### Градиентный спуск (gradient descent)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "<img src='img/grad_desent.gif' width=500 align='center'></img>"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "$$L(w)=\\frac{1}{n}\\sum^{n}_{i=1}\\big({y_{pred}}_i-y_{i}\\big)^{2}=\\frac{1}{n}\\sum^{n}_{i=1}\\big((w_0\\cdot x_{i0}+w_1\\cdot x_{i1})-y_{i}\\big)^{2}\\rightarrow \\underset{w}{\\text{min}}$$\n",
+    "$$w_j\\leftarrow w_j-\\alpha\\frac{\\partial}{\\partial w_j}L(w)$$\n",
+    "$$\\frac{\\partial L(w)}{\\partial w_j}=\\frac{1}{n} 2\\sum^{n}_{i=1}x_{ij}\\Big(\\sum^{m}_{j=0}(w_jx_{ij})-y_i\\Big)$$\n",
+    "$$\\vec{w}=\\vec{w}-\\alpha \\frac{2}{n}X^T(X\\vec{w}-\\vec{y}) $$\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 24,
+   "metadata": {
+    "colab": {},
+    "colab_type": "code",
+    "id": "5DKkvmkwHdOx"
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(array([1. , 0.5]), array([1.1102, 0.84  ]))"
+      ]
+     },
+     "execution_count": 24,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "n = 10\n",
+    "alpha = 1e-3\n",
+    "w = np.array([1, 0.5])\n",
+    "grad = 1/n * 2 * np.sum(X.T * (np.sum(w * X, axis=1) - y), axis=1)\n",
+    "grad = 1/n * 2 * np.dot(X.T, (np.dot(w, X.T) - y))\n",
+    "w, w - alpha * grad"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### Домашние задания"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "colab_type": "text",
+    "id": "huXrhXQsZTMt"
+   },
+   "source": [
+    "1. Подберите скорость обучения (alpha) и количество итераций для градиентного спуска (до совпадения ответов с результатами МНК). Как влияют друг на друга эти два параметра?"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 25,
+   "metadata": {
+    "colab": {
+     "base_uri": "https://localhost:8080/",
+     "height": 185
+    },
+    "colab_type": "code",
+    "id": "IDB22MQKMYaJ",
+    "outputId": "4c03219e-a57c-4583-f439-6699fd0619bb"
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "0 [1.1102 0.84  ] 3173.15\n",
+      "100 [ 7.43515582 10.71754582] 899.5990444359252\n",
+      "200 [11.44993589 10.49282195] 735.5540619653672\n",
+      "300 [14.98921624  9.8634316 ] 606.0048772266812\n",
+      "400 [18.17511588  9.27626113] 500.7989288428639\n",
+      "500 [21.04606457  8.74617136] 415.355423398327\n",
+      "600 [23.63334499  8.26841272] 345.9620646005472\n",
+      "700 [25.96499229  7.83785632] 289.6039104863001\n",
+      "800 [28.06626432  7.44984037] 243.83236130353217\n",
+      "900 [29.95992301  7.10016181] 206.65877484533297\n",
+      "1000 [31.66648131  6.78503276] 176.46806566379882\n"
+     ]
+    }
+   ],
+   "source": [
+    "n = X.shape[0]\n",
+    "alpha = 1e-3\n",
+    "w = np.array([1, 0.5])\n",
+    "\n",
+    "for i in range(1000+1):\n",
+    "    y_pred = np.dot(w, X.T)\n",
+    "    err = calc_mse(y, y_pred)\n",
+    "    for j in range(w.shape[0]):\n",
+    "        w[j] -= alpha * (1/n * 2 * np.sum(X[:,j] * (y_pred - y)))\n",
+    "    if i % 100 == 0:\n",
+    "        print(i, w, err) # МНК: array([47.23214286,  3.91071429]) 45.937499999999986"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "colab_type": "text",
+    "id": "5Qu1o4JhZYwI"
+   },
+   "source": [
+    "*2. В этом коде мы избавляемся от итераций по весам, но тут есть ошибка, исправьте ее:"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 26,
+   "metadata": {
+    "colab": {
+     "base_uri": "https://localhost:8080/",
+     "height": 185
+    },
+    "colab_type": "code",
+    "id": "WZZzDCQLY4pA",
+    "outputId": "28f58ade-72f2-4381-809d-2417752d56e4"
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "0 [1.4502 0.9502] 3173.15\n",
+      "100 [11.6740207 11.1740207] 737.5884748924025\n",
+      "200 [11.82000082 11.32000082] 737.0919281764903\n",
+      "300 [11.82208519 11.32208519] 737.0918269437198\n",
+      "400 [11.82211495 11.32211495] 737.0918269230813\n",
+      "500 [11.82211538 11.32211538] 737.0918269230768\n",
+      "600 [11.82211538 11.32211538] 737.0918269230768\n",
+      "700 [11.82211538 11.32211538] 737.091826923077\n",
+      "800 [11.82211538 11.32211538] 737.0918269230768\n",
+      "900 [11.82211538 11.32211538] 737.0918269230768\n"
+     ]
+    }
+   ],
+   "source": [
+    "w = np.array([1, 0.5])\n",
+    "\n",
+    "for i in range(1000):\n",
+    "    y_pred = np.dot(w, X.T)\n",
+    "    err = calc_mse(y, y_pred)\n",
+    "    '''for j in range(w.shape[0]):\n",
+    "        w[j] -= alpha * (1/n * 2 * np.sum(X[j] * (y_pred - y)))'''\n",
+    "    w -= (alpha * (1/n * 2 * np.sum(X.T * (y_pred - y))))\n",
+    "    if i % 100 == 0:\n",
+    "        print(i, w, err) # [47.23214286  3.91071429] 45.937499999999986"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "colab": {},
+    "colab_type": "code",
+    "id": "kGLyytFgHdco"
+   },
+   "source": [
+    "*3. Вместо того, чтобы задавать количество итераций, задайте условие остановки алгоритма - когда ошибка за итерацию начинает изменяться ниже определенного порога. \n",
+    "\n",
+    "Сколько нужно сделать итераций, если установить допустимое отклонение mse в размере $\\text{diff}=10^{-6}$, а значение $\\alpha=10^{-2}$?"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 27,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "w = np.array([1, 0.5])\n",
+    "diff = 1e-6\n",
+    "alpha = 1e-2\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Заметки по матричным вычислениям http://www.machinelearning.ru/wiki/images/2/2a/Matrix-Gauss.pdf"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  }
+ ],
+ "metadata": {
+  "colab": {
+   "collapsed_sections": [],
+   "name": "Lesson1.ipynb",
+   "provenance": []
+  },
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.7.3"
+  },
+  "toc": {
+   "base_numbering": 1,
+   "nav_menu": {},
+   "number_sections": false,
+   "sideBar": true,
+   "skip_h1_title": true,
+   "title_cell": "План занятия",
+   "title_sidebar": "План",
+   "toc_cell": true,
+   "toc_position": {
+    "height": "calc(100% - 180px)",
+    "left": "10px",
+    "top": "150px",
+    "width": "165px"
+   },
+   "toc_section_display": true,
+   "toc_window_display": true
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 1
+}
